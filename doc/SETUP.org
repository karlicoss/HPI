# TODO  FAQ??
Please don't be shy and raise issues if something in the instructions is unclear.
You'd be really helping me, I want to make the setup as straightforward as possible!

* Few notes
I understand people may not super familiar with Python, PIP or generally unix, so here are some short notes:

- only python3 is supported, and more specifically, ~python >= 3.5~.
- I'm using ~pip3~ command, but on your system you might only have ~pip~.

  If your ~pip --version~ says python 3, feel free to use ~pip~.

- similarly, I'm using =python3= in the documentation, but if your =python --version= says python3, it's okay to use =python=

- when you use ~pip install~, [[https://stackoverflow.com/a/42989020/706389][always pass =--user=]]
- I'm assuming the config directory is =~/.config=, but it's different on Mac/Windows.

  See [[https://github.com/ActiveState/appdirs/blob/3fe6a83776843a46f20c2e5587afcffe05e03b39/appdirs.py#L187-L190][this]] if you're not sure what's your user config dir.

* Setting up the main package
This is a *required step*

You can choose one of the following options:

** local install
This is the most convenient option at the moment:

1. Clone the repository: =git clone git@github.com:karlicoss/HPI.git /path/to/hpi=
2. Go into the project directory: =cd /path/to/hpi=
2. Run  ~pip3 install --user -e .~

   This will install the package in 'editable mode'.
   It will basically be a link to =/path/to/hpi=, which means any changes in the cloned repo will be immediately reflected without need to reinstall anything.

   It's *extremely* convenient for developing and debugging.
  
** use without installing
This is less convenient, but gives you more control.

1. Clone the repository: =git clone git@github.com:karlicoss/HPI.git /path/to/hpi=
2. Go into the project directory: =cd /path/to/hpi=
3. Install the dependencies: ~python3 setup.py --dependencies-only~
4. Use =with_my= script to get access to ~my.~ modules.

   For example:

   : /path/to/hpi/with_my python3 -c 'from my.pinboard import bookmarks; print(list(bookmarks()))'

   It's also convenient to put a symlink to =with_my= somewhere in your system path so you can run it from anywhere, or add an alias in your bashrc:

   : alias with_my='/path/to/hpi/with_my'

   After that, you can wrap your command in =with_my= to give it access to ~my.~ modules, e.g. see [[#usage-examples][examples]].

The benefit of this way is that you get a bit more control, explicitly allowing your scripts to use your data.
  
** install from PIP

This is still work in progress!

* Setting up the modules
This is an *optional step* as some modules might work without extra setup.
But it depends on the specific module.

** private configuration (=my.config=)
# TODO update this section..
If you're not planning to use private configuration (some modules don't need it) you can skip straight to the next step. Still, I'd recommend you to read anyway.

First you need to tell the package where to look for your data and external repositories, which is done though a separate (private) package named ~mycfg~.

You can see example in ~mycfg_template~. You can copy it somewhere else and modify to your needs.

Some explanations:

#+begin_src bash :exports results :results output
  for x in $(find mycfg_template/ | grep -v -E 'mypy_cache|.git|__pycache__|scignore'); do
    if   [[ -L "$x" ]]; then
      echo "l $x -> $(readlink $x)"
    elif [[ -d "$x" ]]; then
      echo "d $x"
    else
      echo "f $x"
      (echo "---"; cat "$x"; echo "---" ) | sed 's/^/  /'
    fi
  done
#+end_src

#+RESULTS:
#+begin_example
d mycfg_template/
d mycfg_template/mycfg
f mycfg_template/mycfg/__init__.py
  ---
  class paths:
      """
      Feel free to remove this if you don't need it/add your own custom settings and use them
      """
      class hypothesis:
          export_path = '/tmp/my_demo/backups/hypothesis'
  ---
d mycfg_template/mycfg/repos
l mycfg_template/mycfg/repos/hypexport -> /tmp/my_demo/hypothesis_repo
#+end_example

As you can see, generally you specify fixed paths (e.g. to backup directory) in ~__init__.py~.
Feel free to add other files as well though to organize better, it's a real python package after all!

Some things (e.g. links to external packages like [[https://github.com/karlicoss/hypexport][hypexport]]) are specified as normal symlinks in ~repos~ directory.
That way you get easy imports (e.g. =import mycfg.repos.hypexport.model=) and proper IDE integration.

# TODO link to post about exports?
** module dependencies
Dependencies are different for specific modules you're planning to use, so it's hard to specify.

Generally you can just try using the module and then install missing packages via ~pip3 install --user~, should be fairly straightforward.

* Usage examples
If you run your script with ~with_my~ wrapper, you'd have ~my~ in ~PYTHONPATH~ which gives you access to your data from within the script.

** Polar
Polar doesn't require any setup as it accesses the highlights on your filesystem (should be in =~/.polar=).

You can try if it works with:

: with_my python3 -c 'import my.reading.polar as polar; print(polar.get_entries())'

** Kobo reader
Kobo provider allows you access the books you've read along with the highlights and notes.
It uses exports provided by [[https://github.com/karlicoss/kobuddy][kobuddy]] package.

- prepare the config

  1. Point  =ln -sfT /path/to/kobuddy ~/.config/my/config/repos/kobuddy=
  2. Add kobo config to =~/.config/my/config/__init__.py=
    #+begin_src python
    class kobo:
        export_dir = 'path/to/kobo/exports'
    #+end_src

After that you should be able to use it:

#+begin_src bash
  with_my python3 -c 'import my.books.kobo as kobo; print(kobo.get_highlights())'
#+end_src

** Orger
# TODO include this from orger docs??

You can use [[https://github.com/karlicoss/orger][orger]] to get Org-mode representations of your data.

Some examples (assuming you've [[https://github.com/karlicoss/orger#installing][installed]] Orger):

*** Orger + [[https://github.com/burtonator/polar-bookshelf][Polar]]

This will convert Polar highlights into org-mode:

: with_my orger/modules/polar.py --to polar.org

** =demo.py=
read/run [[../demo.py][demo.py]] for a full demonstration of setting up Hypothesis (it uses public annotations data from Github)
